// Code generated by goyacc -o yacc.go yacc.y. DO NOT EDIT.

//line yacc.y:2
package parser

import __yyfmt__ "fmt"

//line yacc.y:2

import (
	"miniSQL/src/Interpreter/types"
	Value "miniSQL/src/Interpreter/value"
	"strconv"
)

//line yacc.y:11
type yySymType struct {
	yys     int
	empty   struct{}
	flag    bool
	i64     int64
	int     int
	f64     float64
	str     string
	strs    []string
	col     types.Column
	cols    []types.Column
	coltype types.ColumnType
	key     types.Key
	keys    []types.Key
	//   keyorder  types.KeyOrder
	//   clstr     types.Cluster
	//   ondelete  types.OnDelete
	//   stcls     types.StoringClause
	//   intlr     types.Interleave
	//   intlrs    []types.Interleave
	fieldsname    types.FieldsName
	LastToken     int
	expr          types.Expr
	where         *types.Where
	limit         types.Limit
	compare       Value.CompareType
	valuetype     Value.Value
	valuetypelist []Value.Value
	setexpr       types.SetExpr
	setexprlist   []types.SetExpr
}

const IDENT = 57346
const IDENT_LEGAL = 57347
const PRIMARY = 57348
const KEY = 57349
const ASC = 57350
const DESC = 57351
const IN = 57352
const INTERLEAVE = 57353
const AND = 57354
const OR = 57355
const NOT = 57356
const NULL = 57357
const ON = 57358
const CASCADE = 57359
const NO = 57360
const ACTION = 57361
const MAX = 57362
const UNIQUE = 57363
const ADD = 57364
const COLUMN = 57365
const SET = 57366
const TRUE = 57367
const FALSE = 57368
const allow_commit_timestamp = 57369
const LE = 57370
const GE = 57371
const NE = 57372
const CREATE = 57373
const DROP = 57374
const EXECFILE = 57375
const USE = 57376
const DATABASE = 57377
const TABLE = 57378
const INDEX = 57379
const STORING = 57380
const SELECT = 57381
const WHERE = 57382
const FROM = 57383
const LIMIT = 57384
const OFFSET = 57385
const VALUES = 57386
const INSERT = 57387
const INTO = 57388
const UPDATE = 57389
const DELETE = 57390
const BOOL = 57391
const INT64 = 57392
const FLOAT64 = 57393
const STRING = 57394
const BYTES = 57395
const DATE = 57396
const TIMESTAMP = 57397
const database_id = 57398
const table_name = 57399
const column_name = 57400
const index_name = 57401
const decimal_value = 57402
const hex_value = 57403
const float_value = 57404
const string_value = 57405

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"IDENT_LEGAL",
	"PRIMARY",
	"KEY",
	"ASC",
	"DESC",
	"IN",
	"INTERLEAVE",
	"AND",
	"OR",
	"NOT",
	"NULL",
	"ON",
	"CASCADE",
	"NO",
	"ACTION",
	"MAX",
	"UNIQUE",
	"ADD",
	"COLUMN",
	"SET",
	"TRUE",
	"FALSE",
	"allow_commit_timestamp",
	"'('",
	"','",
	"')'",
	"';'",
	"'*'",
	"'.'",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"CREATE",
	"DROP",
	"EXECFILE",
	"USE",
	"DATABASE",
	"TABLE",
	"INDEX",
	"STORING",
	"SELECT",
	"WHERE",
	"FROM",
	"LIMIT",
	"OFFSET",
	"VALUES",
	"INSERT",
	"INTO",
	"UPDATE",
	"DELETE",
	"BOOL",
	"INT64",
	"FLOAT64",
	"STRING",
	"BYTES",
	"DATE",
	"TIMESTAMP",
	"database_id",
	"table_name",
	"column_name",
	"index_name",
	"decimal_value",
	"hex_value",
	"float_value",
	"string_value",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 216

var yyAct = [...]uint8{
	97, 166, 165, 96, 122, 38, 83, 94, 77, 145,
	130, 53, 54, 104, 79, 164, 53, 54, 69, 46,
	61, 98, 104, 102, 103, 118, 51, 104, 53, 54,
	146, 147, 102, 103, 86, 95, 64, 102, 103, 112,
	113, 114, 60, 115, 116, 117, 56, 48, 49, 59,
	58, 55, 168, 150, 66, 75, 120, 40, 62, 50,
	80, 41, 42, 43, 146, 147, 72, 105, 106, 107,
	99, 81, 57, 92, 93, 169, 105, 106, 107, 99,
	74, 105, 106, 107, 99, 67, 87, 88, 175, 183,
	123, 91, 121, 80, 126, 90, 52, 15, 17, 22,
	16, 125, 39, 129, 35, 18, 138, 80, 137, 34,
	47, 19, 174, 20, 21, 140, 142, 131, 132, 133,
	134, 135, 136, 149, 182, 36, 37, 127, 128, 175,
	176, 154, 149, 148, 155, 151, 152, 45, 157, 63,
	124, 156, 108, 109, 158, 153, 65, 33, 32, 31,
	170, 30, 29, 163, 28, 27, 26, 25, 24, 63,
	172, 171, 144, 143, 89, 68, 39, 85, 70, 173,
	127, 128, 123, 161, 159, 180, 179, 181, 177, 178,
	84, 141, 53, 54, 167, 78, 47, 84, 73, 2,
	14, 23, 13, 12, 11, 10, 9, 8, 7, 6,
	5, 4, 3, 1, 76, 119, 44, 71, 160, 139,
	101, 100, 162, 111, 110, 82,
}

var yyPact = [...]int16{
	57, 57, -1000, 127, 126, 125, 124, 123, 121, 120,
	118, 117, 116, 78, 73, 81, 13, 17, 105, -8,
	-18, 9, 24, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -14, -20, 26, -1000,
	-15, -16, -24, -48, 8, -1000, 130, -1000, -30, 122,
	178, 52, -1000, -1000, -1000, -1000, 137, -50, -1000, -1000,
	-1000, 152, 178, 183, 27, 180, 11, 178, 182, 151,
	-32, 58, -1000, -1000, 136, 181, 44, -1000, 40, -1000,
	7, -1000, 113, -1000, -19, -41, -1000, 5, 178, -2,
	110, -1000, 180, -2, 158, 7, 83, 83, 7, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 175, -1000,
	145, -1000, -1000, -1000, -1000, 135, -1000, -1000, 134, -1000,
	-39, -1000, 103, -1000, 0, -1000, -1000, 7, 7, 115,
	12, -1000, -1000, -1000, -1000, -1000, -1000, 12, 158, 114,
	-1000, 167, 159, -5, 179, 23, -1000, -1000, -1000, -2,
	133, 158, 158, -1000, -1000, -1000, -1000, -1000, -1000, 132,
	-1000, 154, 82, -1000, -1000, 100, -1000, -1000, -39, -39,
	-1000, -2, 179, -1000, -1000, 179, -1000, -1000, -1000, 94,
	59, -1000, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 6, 215, 214, 213, 212, 211, 210, 1, 2,
	209, 208, 5, 3, 19, 207, 206, 7, 205, 10,
	0, 9, 14, 8, 204, 4, 203, 189, 202, 201,
	200, 199, 198, 197, 196, 195, 194, 193, 192, 190,
}

var yyR1 = [...]int8{
	0, 26, 26, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 39, 39, 39, 28, 29,
	30, 30, 2, 2, 2, 1, 10, 10, 9, 9,
	8, 3, 4, 4, 4, 4, 4, 4, 5, 5,
	11, 11, 31, 12, 12, 14, 14, 32, 33, 34,
	36, 36, 37, 24, 24, 23, 38, 35, 16, 16,
	15, 15, 22, 22, 17, 17, 17, 17, 17, 17,
	17, 17, 25, 25, 20, 20, 20, 20, 20, 20,
	20, 19, 19, 19, 19, 19, 19, 18, 18, 18,
	18, 21, 21, 6, 6, 7, 13, 13,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 4, 2, 3, 3,
	8, 6, 0, 1, 3, 4, 0, 5, 1, 3,
	1, 1, 1, 1, 1, 4, 1, 1, 1, 1,
	0, 2, 9, 0, 1, 1, 3, 3, 3, 5,
	7, 10, 5, 1, 3, 3, 4, 6, 1, 1,
	1, 3, 0, 2, 3, 3, 3, 3, 3, 3,
	3, 2, 1, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 4,
	4, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -26, -27, -28, -29, -30, -31, -32, -33, -34,
	-35, -36, -37, -38, -39, 40, 43, 41, 48, 54,
	56, 57, 42, -27, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 44, 45, -12, 21,
	44, 44, 45, 46, -16, 32, -14, 5, 55, 66,
	50, -13, 72, 4, 5, 65, 66, 46, 65, 65,
	66, 68, 50, 29, 66, 24, -13, 33, 28, 68,
	16, -15, -13, 5, 53, 28, -24, -23, 5, -22,
	49, -13, -2, -1, 5, 16, 66, -22, 29, 28,
	-14, -22, 29, 34, -17, 28, -13, -20, 14, 72,
	-6, -7, 25, 26, 15, 69, 70, 71, 29, 30,
	-3, -4, 58, 59, 60, 62, 63, 64, 66, -18,
	51, -13, -25, -20, 30, -23, -20, 12, 13, -17,
	-19, 34, 35, 36, 37, 38, 39, -19, -17, -10,
	-1, 6, -12, 28, 28, -21, 69, 70, 30, 29,
	53, -17, -17, 30, -20, -13, -13, -20, 30, 7,
	-11, 14, -5, -21, 20, -9, -8, 5, 29, 52,
	-20, 28, 28, 15, 30, 29, 30, -21, -21, -25,
	-9, -8, 30, 30,
}

var yyDef = [...]int8{
	0, -2, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	0, 0, 0, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 58, 59, 45, 0, 0,
	0, 15, 17, 96, 97, 18, 0, 0, 19, 47,
	48, 0, 0, 0, 0, 0, 62, 0, 22, 0,
	0, 62, 60, 46, 0, 0, 62, 53, 0, 56,
	74, 16, 0, 23, 0, 0, 49, 87, 0, 74,
	0, 52, 0, 74, 63, 74, 0, 0, 74, 75,
	76, 77, 78, 79, 80, 93, 94, 95, 26, 21,
	43, 31, 32, 33, 34, 0, 36, 37, 0, 57,
	0, 61, 0, 72, 0, 54, 55, 74, 74, 0,
	74, 81, 82, 83, 84, 85, 86, 74, 71, 0,
	24, 0, 40, 0, 0, 88, 91, 92, 50, 74,
	0, 69, 70, 64, 65, 68, 66, 67, 20, 0,
	25, 0, 0, 38, 39, 0, 28, 30, 0, 0,
	73, 74, 0, 41, 35, 0, 42, 89, 90, 0,
	0, 29, 51, 27,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	28, 30, 32, 3, 29, 3, 33, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 31,
	35, 34, 36,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yacc.y:124
		{
			s := types.ExecFileStatement{
				FileName: yyDollar[2].str,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc.y:130
		{
			s := types.ExecFileStatement{
				FileName: yyDollar[2].str + "." + yyDollar[4].str,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yacc.y:136
		{
			s := types.ExecFileStatement{
				FileName: yyDollar[2].str,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:145
		{
			s := types.CreateDatabaseStatement{
				DatabaseId: yyDollar[3].str,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:153
		{
			s := types.UseDatabaseStatement{
				DatabaseId: yyDollar[3].str,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 20:
		yyDollar = yyS[yypt-8 : yypt+1]
//line yacc.y:161
		{
			tmpmap := make(map[string]types.Column)
			for index, item := range yyDollar[5].cols {
				item.ColumnPos = index
				tmpmap[item.Name] = item
			}

			s := types.CreateTableStatement{
				TableName:   yyDollar[3].str,
				ColumnsMap:  tmpmap,
				PrimaryKeys: yyDollar[7].keys,
				// Cluster:     $9,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line yacc.y:177
		{
			tmpmap := make(map[string]types.Column)
			for index, item := range yyDollar[5].cols {
				item.ColumnPos = index
				tmpmap[item.Name] = item
			}
			s := types.CreateTableStatement{
				TableName:  yyDollar[3].str,
				ColumnsMap: tmpmap,
				// Cluster:     $7,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line yacc.y:193
		{
			yyVAL.cols = make([]types.Column, 0, 0)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:197
		{
			yyVAL.cols = make([]types.Column, 0, 1)
			yyVAL.cols = append(yyVAL.cols, yyDollar[1].col)
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:202
		{
			yyVAL.cols = append(yyDollar[1].cols, yyDollar[3].col)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc.y:208
		{
			yyVAL.col = types.Column{Name: yyDollar[1].str, Type: yyDollar[2].coltype, Unique: yyDollar[3].flag, NotNull: yyDollar[4].flag}
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line yacc.y:213
		{
			yyVAL.keys = make([]types.Key, 0, 1)
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line yacc.y:217
		{
			yyVAL.keys = yyDollar[4].keys
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:223
		{
			yyVAL.keys = make([]types.Key, 0, 1)
			yyVAL.keys = append(yyVAL.keys, yyDollar[1].key)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:228
		{
			yyVAL.keys = append(yyDollar[1].keys, yyDollar[3].key)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:234
		{
			yyVAL.key = types.Key{
				Name: yyDollar[1].str,
				// KeyOrder: $2
			}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:288
		{
			yyVAL.coltype = yyDollar[1].coltype
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:295
		{
			yyVAL.coltype = types.ColumnType{TypeTag: types.Bool, Length: 1}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:299
		{
			yyVAL.coltype = types.ColumnType{TypeTag: types.Int64, Length: 8}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:303
		{
			yyVAL.coltype = types.ColumnType{TypeTag: types.Float64, Length: 8}
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc.y:308
		{
			yyVAL.coltype = types.ColumnType{TypeTag: types.Bytes, Length: yyDollar[3].int}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:312
		{
			yyVAL.coltype = types.ColumnType{TypeTag: types.Date, Length: 5}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:316
		{
			yyVAL.coltype = types.ColumnType{TypeTag: types.Timestamp, Length: 8}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:322
		{
			yyVAL.int = yyDollar[1].int
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:326
		{
			yyVAL.int = 255
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line yacc.y:348
		{
			yyVAL.flag = types.False
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yacc.y:352
		{
			yyVAL.flag = types.True
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
//line yacc.y:358
		{
			s := types.CreateIndexStatement{
				Unique:    yyDollar[2].flag,
				IndexName: yyDollar[4].str,
				TableName: yyDollar[6].str,
				Keys:      yyDollar[8].keys,
				// StoringClause: $10,
				// Interleaves:   $11,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line yacc.y:372
		{
			yyVAL.flag = types.False
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:376
		{
			yyVAL.flag = types.True
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:399
		{
			yyVAL.strs = make([]string, 0, 1)
			yyVAL.strs = append(yyVAL.strs, yyDollar[1].str)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:404
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:431
		{
			s := types.DropDatabaseStatement{
				DatabaseId: yyDollar[3].str,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:440
		{
			s := types.DropTableStatement{
				TableName: yyDollar[3].str,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line yacc.y:449
		{
			s := types.DropIndexStatement{
				TableName: yyDollar[5].str,
				IndexName: yyDollar[3].str,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
//line yacc.y:459
		{
			s := types.InsertStament{
				TableName:   yyDollar[3].str,
				ColumnNames: make([]string, 0, 0),
				Values:      yyDollar[6].valuetypelist,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 51:
		yyDollar = yyS[yypt-10 : yypt+1]
//line yacc.y:468
		{
			s := types.InsertStament{
				TableName:   yyDollar[3].str,
				ColumnNames: yyDollar[5].strs,
				Values:      yyDollar[9].valuetypelist,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line yacc.y:478
		{
			s := types.UpdateStament{
				TableName: yyDollar[2].str,
				SetExpr:   yyDollar[4].setexprlist,
				Where:     yyDollar[5].where,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:488
		{
			yyVAL.setexprlist = make([]types.SetExpr, 0, 1)
			yyVAL.setexprlist = append(yyVAL.setexprlist, yyDollar[1].setexpr)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:493
		{
			yyVAL.setexprlist = append(yyDollar[1].setexprlist, yyDollar[3].setexpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:498
		{
			yyVAL.setexpr = types.SetExpr{
				Left:  yyDollar[1].str,
				Right: yyDollar[3].valuetype,
			}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc.y:506
		{
			s := types.DeleteStatement{
				TableName: yyDollar[3].str,
				Where:     yyDollar[4].where,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
//line yacc.y:515
		{
			s := types.SelectStatement{
				Fields:     yyDollar[2].fieldsname,
				TableNames: yyDollar[4].strs,
				Where:      yyDollar[5].where,
				Limit:      yyDollar[6].limit,
			}
			yylex.(*lexerWrapper).channelSend <- s
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:526
		{
			yyVAL.fieldsname = types.FieldsName{
				SelectAll: true,
			}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:532
		{
			yyVAL.fieldsname = types.FieldsName{
				SelectAll:   false,
				ColumnNames: yyDollar[1].strs,
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:541
		{
			yyVAL.strs = make([]string, 0, 1)
			yyVAL.strs = append(yyVAL.strs, yyDollar[1].str)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:546
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line yacc.y:551
		{
			yyVAL.where = nil
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yacc.y:555
		{
			yyVAL.where = &types.Where{Expr: yyDollar[2].expr}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:560
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:564
		{
			yyVAL.expr = &types.ComparisonExprLSRV{Left: yyDollar[1].str, Operator: yyDollar[2].compare, Right: yyDollar[3].valuetype}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:568
		{
			yyVAL.expr = &types.ComparisonExprLVRS{Left: yyDollar[1].valuetype, Operator: yyDollar[2].compare, Right: yyDollar[3].str}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:572
		{
			yyVAL.expr = &types.ComparisonExprLVRV{Left: yyDollar[1].valuetype, Operator: yyDollar[2].compare, Right: yyDollar[3].valuetype}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:576
		{
			yyVAL.expr = &types.ComparisonExprLSRS{Left: yyDollar[1].str, Operator: yyDollar[2].compare, Right: yyDollar[3].str}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:580
		{
			left := yyDollar[1].expr
			right := yyDollar[3].expr
			yyVAL.expr = &types.AndExpr{Left: left, Right: right, LeftNum: left.GetTargetColsNum(), RightNum: right.GetTargetColsNum()}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:586
		{
			left := yyDollar[1].expr
			right := yyDollar[3].expr
			yyVAL.expr = &types.OrExpr{Left: left, Right: right, LeftNum: left.GetTargetColsNum(), RightNum: right.GetTargetColsNum()}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yacc.y:592
		{
			left := yyDollar[2].expr
			yyVAL.expr = &types.NotExpr{Expr: left, LeftNum: left.GetTargetColsNum()}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:599
		{
			yyVAL.valuetypelist = make([]Value.Value, 0, 1)
			yyVAL.valuetypelist = append(yyVAL.valuetypelist, yyDollar[1].valuetype)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc.y:604
		{
			yyVAL.valuetypelist = append(yyDollar[1].valuetypelist, yyDollar[3].valuetype)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line yacc.y:609
		{
			yyVAL.valuetype = Value.Bytes{}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:613
		{
			yyVAL.valuetype = Value.Bytes{Val: []byte(yyDollar[1].str)}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:617
		{
			yyVAL.valuetype = Value.Int{Val: yyDollar[1].i64}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:621
		{
			yyVAL.valuetype = Value.Float{Val: yyDollar[1].f64}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:625
		{
			yyVAL.valuetype = Value.Bool{Val: true}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:629
		{
			yyVAL.valuetype = Value.Bool{Val: false}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:633
		{
			yyVAL.valuetype = Value.Null{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:637
		{
			yyVAL.compare = Value.Equal
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:638
		{
			yyVAL.compare = Value.Less
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:639
		{
			yyVAL.compare = Value.Great
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:640
		{
			yyVAL.compare = Value.LessEqual
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:641
		{
			yyVAL.compare = Value.GreatEqual
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:642
		{
			yyVAL.compare = Value.NotEqual
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line yacc.y:646
		{
			yyVAL.limit = types.Limit{}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yacc.y:650
		{
			yyVAL.limit = types.Limit{Rowcount: yyDollar[2].int}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc.y:654
		{
			yyVAL.limit = types.Limit{Offset: yyDollar[2].int, Rowcount: yyDollar[4].int}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc.y:658
		{
			yyVAL.limit = types.Limit{Offset: yyDollar[2].int, Rowcount: yyDollar[4].int}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:663
		{
			v, _ := strconv.Atoi(yyDollar[1].str)
			yyVAL.int = v
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:668
		{
			v, _ := strconv.ParseInt(yyDollar[1].str, 16, 32)
			yyVAL.int = int(v)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:674
		{
			v, _ := strconv.ParseInt(yyDollar[1].str, 10, 64)
			yyVAL.i64 = v
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:679
		{
			v, _ := strconv.ParseInt(yyDollar[1].str, 16, 64)
			yyVAL.i64 = v
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:686
		{
			v, _ := strconv.ParseFloat(yyDollar[1].str, 0)
			yyVAL.f64 = v
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:693
		{
			yyVAL.str = yyDollar[1].str
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc.y:697
		{
			yyVAL.str = yyDollar[1].str
		}
	}
	goto yystack /* stack new state and value */
}
